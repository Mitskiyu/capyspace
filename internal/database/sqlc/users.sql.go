// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id, email, password, username, display_name
) VALUES ($1, $2, $3, $4, $5)
RETURNING id, email, password, username, username_lower, display_name, provider, provider_id, created_at, modified_at
`

type CreateUserParams struct {
	ID          uuid.UUID
	Email       string
	Password    string
	Username    string
	DisplayName string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.Username,
		arg.DisplayName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.UsernameLower,
		&i.DisplayName,
		&i.Provider,
		&i.ProviderID,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, username, username_lower, display_name, provider, provider_id, created_at, modified_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.UsernameLower,
		&i.DisplayName,
		&i.Provider,
		&i.ProviderID,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, email, password, username, username_lower, display_name, provider, provider_id, created_at, modified_at FROM users
WHERE username_lower = lower($1)
`

func (q *Queries) GetUserByUsername(ctx context.Context, lower string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, lower)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.UsernameLower,
		&i.DisplayName,
		&i.Provider,
		&i.ProviderID,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

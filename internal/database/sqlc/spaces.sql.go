// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: spaces.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createSpace = `-- name: CreateSpace :one
INSERT INTO spaces (
    id, user_id
) VALUES ($1, $2)
RETURNING id, user_id, is_private, created_at, modified_at
`

type CreateSpaceParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) CreateSpace(ctx context.Context, arg CreateSpaceParams) (Space, error) {
	row := q.db.QueryRowContext(ctx, createSpace, arg.ID, arg.UserID)
	var i Space
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsPrivate,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getSpaceByUsername = `-- name: GetSpaceByUsername :one
SELECT s.id, s.user_id, s.is_private, s.created_at, s.modified_at
FROM spaces s
JOIN users u ON s.user_id = u.id
WHERE u.username = $1
`

func (q *Queries) GetSpaceByUsername(ctx context.Context, username string) (Space, error) {
	row := q.db.QueryRowContext(ctx, getSpaceByUsername, username)
	var i Space
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsPrivate,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}
